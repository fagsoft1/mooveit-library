{"version":3,"file":"index.js","sources":["../src/components/Themes/ThemeContext.tsx","../src/components/Button/Button.tsx","../src/components/InputLabel/InputLabel.tsx","../src/components/InputBase/InputBase.tsx","../src/components/InputText/InputText.tsx","../src/components/InputNumber/InputNumber.tsx","../src/components/SelectInput/SelectInput.tsx","../node_modules/style-inject/dist/style-inject.es.js","../src/components/Autocomplete/Autocomplete.tsx","../src/components/Themes/ThemeContextProvider.tsx"],"sourcesContent":["import {createContext} from 'react';\nimport {ITheme} from './ThemeContextProvider.types';\n\nconst defaultTheme: ITheme = {\n    palette: {\n        primary: {main: 'black', contrast: 'white'},\n        secondary: {main: 'red', contrast: 'white'},\n    },\n};\nconst ThemeContext = createContext(defaultTheme);\nexport default ThemeContext;\n","import React, {useContext} from 'react';\nimport ThemeContext from '../Themes/ThemeContext';\n\nimport IButton from './Button.types';\n\nconst Button: React.FC<IButton> = ({text, disabled = false, type = 'button', onClick, palette}: IButton) => {\n    const theme = useContext(ThemeContext);\n    const currentPalette = palette === 'primary' ? theme.palette.primary : theme.palette.secondary;\n    return (\n        <button\n            onClick={onClick}\n            disabled={disabled}\n            type={type} // eslint-disable-line react/button-has-type\n            style={{\n                background: currentPalette.main,\n                color: currentPalette.contrast,\n            }}\n        >\n            {text}\n        </button>\n    );\n};\nexport default Button;\n","import React, {useContext} from 'react';\nimport IInputLabel from './InputLabel.types';\nimport ThemeContext from '../Themes/ThemeContext';\n\nconst InputLabel: React.FC<IInputLabel> = ({label, name, children, palette}: IInputLabel) => {\n    const theme = useContext(ThemeContext);\n    const currentPalette = palette === 'primary' ? theme.palette.primary : theme.palette.secondary;\n    return (\n        <>\n            <label style={{color: currentPalette.main}} htmlFor={name}>\n                <span>{label} </span>\n            </label>\n            {children}\n        </>\n    );\n};\nexport default InputLabel;\n","import React, {useContext} from 'react';\nimport IInputBase from './InputBase.types';\nimport InputLabel from '../InputLabel/InputLabel';\nimport ThemeContext from '../Themes/ThemeContext';\n\nconst InputBase: React.FC<IInputBase> = ({\n    label,\n    value,\n    name,\n    onKeyUp,\n    onChange,\n    disabled,\n    onKeyDown,\n    className,\n    palette,\n}: IInputBase) => {\n    const theme = useContext(ThemeContext);\n    const currentPalette = palette === 'primary' ? theme.palette.primary : theme.palette.secondary;\n    return (\n        <InputLabel label={label} name={name} palette={palette}>\n            <input\n                style={{backgroundColor: currentPalette.main, color: currentPalette.contrast}}\n                className={className}\n                onKeyDown={onKeyDown}\n                value={value}\n                onChange={onChange}\n                name={name}\n                onKeyUp={onKeyUp}\n                disabled={disabled}\n                aria-label={label}\n            />\n        </InputLabel>\n    );\n};\nexport default InputBase;\n","import React, {useState, useEffect} from 'react';\nimport InputBase from '../InputBase/InputBase';\nimport IInputText from './InputText.types';\n\nconst InputText: React.FC<IInputText> = (props: IInputText) => {\n    const {value = '', disabled = false, name, label, className, onKeyDown, onChange, palette} = props;\n    const [currentValue, setCurrentValue] = useState(value);\n    useEffect(() => {\n        setCurrentValue(value);\n    }, [value]);\n    return (\n        <InputBase\n            className={className}\n            disabled={disabled}\n            palette={palette}\n            name={name}\n            label={label}\n            onKeyDown={onKeyDown}\n            onChange={(e) => {\n                setCurrentValue(e.target.value);\n                if (onChange) {\n                    onChange(e);\n                }\n            }}\n            value={currentValue}\n        />\n    );\n};\n\nexport default InputText;\n","import React, {useState} from 'react';\nimport InputBase from '../InputBase/InputBase';\n\nimport IInputNumber from './InputNumber.types';\n\nconst InputNumber: React.FC<IInputNumber> = ({\n    name,\n    value = '',\n    label,\n    onChange,\n    decimalSeparator = '.',\n    disabled = false,\n    palette = 'primary',\n}: IInputNumber) => {\n    const [currentValue, setCurrentValue] = useState(value);\n    const justNumbers = (text: string) => text.replace(/[^0-9]/g, '');\n    const createMask = (text: string) => {\n        return text.replace(/(\\d)(?=(\\d\\d\\d)+(?!\\d))/g, `$1${decimalSeparator}`);\n    };\n    const destroyMask = (text: string) => {\n        return text.replace(/\\D/g, '').substring(0, 40);\n    };\n    return (\n        <InputBase\n            palette={palette}\n            disabled={disabled}\n            onChange={(e) => {\n                setCurrentValue(justNumbers(e.target.value));\n                if (onChange) {\n                    onChange(e);\n                }\n            }}\n            onKeyUp={(e) => {\n                setCurrentValue(createMask(destroyMask(e.currentTarget.value)));\n            }}\n            value={currentValue}\n            label={label}\n            name={name}\n        />\n    );\n};\nexport default InputNumber;\n","import React, {useContext, useEffect, useState} from 'react';\nimport InputLabel from '../InputLabel/InputLabel';\nimport ISelectInput from './SelectInput.types';\nimport ThemeContext from '../Themes/ThemeContext';\n\nconst SelectInput: React.FC<ISelectInput> = ({\n    options,\n    name,\n    label,\n    multiple = false,\n    disabled = false,\n    value = undefined,\n    onChange,\n    palette = 'primary',\n}: ISelectInput) => {\n    const [currentValue, setCurrentValue] = useState(value);\n    useEffect(() => {\n        setCurrentValue(value);\n    }, [value]);\n    const theme = useContext(ThemeContext);\n    const currentPalette = palette === 'primary' ? theme.palette.primary : theme.palette.secondary;\n    return (\n        <InputLabel label={label} name={name} palette={palette}>\n            <select\n                style={{\n                    background: currentPalette.main,\n                    color: currentPalette.contrast,\n                }}\n                name={name}\n                id={name}\n                data-testid={name}\n                multiple={multiple}\n                disabled={disabled}\n                value={currentValue}\n                onChange={(e) => {\n                    setCurrentValue(Array.from(e.target.selectedOptions, (item) => item.value));\n                    if (onChange) {\n                        onChange(e);\n                    }\n                }}\n            >\n                {options.map((e) => (\n                    <option key={e.value} value={e.value}>\n                        {e.text}\n                    </option>\n                ))}\n            </select>\n        </InputLabel>\n    );\n};\nexport default SelectInput;\n","function styleInject(css, ref) {\n  if ( ref === void 0 ) ref = {};\n  var insertAt = ref.insertAt;\n\n  if (!css || typeof document === 'undefined') { return; }\n\n  var head = document.head || document.getElementsByTagName('head')[0];\n  var style = document.createElement('style');\n  style.type = 'text/css';\n\n  if (insertAt === 'top') {\n    if (head.firstChild) {\n      head.insertBefore(style, head.firstChild);\n    } else {\n      head.appendChild(style);\n    }\n  } else {\n    head.appendChild(style);\n  }\n\n  if (style.styleSheet) {\n    style.styleSheet.cssText = css;\n  } else {\n    style.appendChild(document.createTextNode(css));\n  }\n}\n\nexport default styleInject;\n","import React, {useState, useEffect, useMemo} from 'react';\nimport '../../stylesCCS.css';\n\nimport IAutocomplete from './Autocomplete.types';\nimport InputText from '../InputText/InputText';\n\nconst Autocomplete: React.FC<IAutocomplete> = ({value = '', label, name, onChange, options, palette}: IAutocomplete) => {\n    const [activeOption, setActiveOption] = useState(0);\n    const [showOptions, setShowOptions] = useState(false);\n    const [userInput, setUserInput] = useState(value);\n\n    useEffect(() => setUserInput(value), [value]);\n\n    const onChangeHandler = (e: React.FormEvent<HTMLInputElement>) => {\n        setShowOptions(true);\n        setActiveOption(0);\n        setUserInput(e.currentTarget.value);\n        if (onChange) {\n            onChange(e);\n        }\n    };\n\n    const filteredOptions = useMemo(() => {\n        // to avoid to be recalculated when keyDown event\n        return options.filter((option: string) => option.toLowerCase().indexOf(userInput.toLowerCase()) > -1);\n    }, [userInput]);\n\n    const onKeyDown = (e: React.KeyboardEvent<HTMLInputElement>) => {\n        const activeLimit = filteredOptions.length - 1;\n        switch (e.keyCode) {\n            case 13: // Enter\n                setActiveOption(0);\n                setShowOptions(false);\n                setUserInput(filteredOptions[activeOption]);\n                break;\n            case 38: // ArrowUp\n                if (activeOption === 0) {\n                    return;\n                }\n                setActiveOption(activeOption - 1);\n                break;\n            case 40: // ArrowDown\n                if (activeOption === activeLimit) {\n                    setActiveOption(activeLimit);\n                } else {\n                    setActiveOption(activeOption + 1);\n                }\n                break;\n            default:\n                break;\n        }\n    };\n\n    const onClick = (e: React.MouseEvent<HTMLElement>) => {\n        setActiveOption(0);\n        setShowOptions(false);\n        setUserInput(e.currentTarget.innerText);\n    };\n\n    let optionList = null;\n    if (showOptions && userInput) {\n        if (filteredOptions.length) {\n            optionList = (\n                <ul className=\"options\">\n                    {filteredOptions.map((optionName, index) => {\n                        let className;\n                        if (index === activeOption) {\n                            className = 'option-active';\n                        }\n                        return (\n                            <li role=\"presentation\" className={className} key={optionName} onClick={onClick}>\n                                {optionName}\n                            </li>\n                        );\n                    })}\n                </ul>\n            );\n        } else {\n            optionList = (\n                <div className=\"no-options\">\n                    <em>No Option!</em>\n                </div>\n            );\n        }\n    }\n    return (\n        <>\n            <InputText\n                palette={palette}\n                label={label}\n                name={name}\n                className=\"search-box\"\n                onChange={onChangeHandler}\n                onKeyDown={onKeyDown}\n                value={userInput}\n            />\n            {optionList}\n        </>\n    );\n};\n\nexport default Autocomplete;\n","import React from 'react';\nimport ThemeContext from './ThemeContext';\nimport IThemeContextProvider from './ThemeContextProvider.types';\n\nconst ThemeContextProvider = ({children, theme}: IThemeContextProvider) => {\n    return <ThemeContext.Provider value={theme}>{children}</ThemeContext.Provider>;\n};\nexport default ThemeContextProvider;\n"],"names":["defaultTheme","palette","primary","main","contrast","secondary","ThemeContext","createContext","Button","_a","text","_b","disabled","_c","type","onClick","theme","useContext","currentPalette","React","style","background","color","InputLabel","label","name","children","htmlFor","InputBase","value","onKeyUp","onChange","onKeyDown","className","backgroundColor","InputText","props","useState","currentValue","setCurrentValue","useEffect","e","target","InputNumber","decimalSeparator","_d","_e","_f","replace","currentTarget","substring","SelectInput","options","multiple","undefined","id","Array","from","selectedOptions","item","map","key","styleInject","css","ref","head","insertAt","document","getElementsByTagName","createElement","firstChild","insertBefore","appendChild","styleSheet","cssText","createTextNode","Autocomplete","activeOption","setActiveOption","showOptions","setShowOptions","userInput","setUserInput","innerText","filteredOptions","useMemo","filter","option","toLowerCase","indexOf","optionList","length","optionName","index","role","activeLimit","keyCode","ThemeContextProvider","Provider"],"mappings":"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"}